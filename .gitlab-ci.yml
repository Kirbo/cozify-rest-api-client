###### STAGES #################################################################
stages:
  - install
  - test
  - build
  - publish

###### TEMPLATES ##############################################################
.general: &general
  image: node:8.11
  tags:
    - gitlab-org
  variables:
    GIT_STRATEGY: fetch

.release: &release
  <<: *general
  only:
    - release

###### JOBS ###################################################################
install:
  <<: *general
  stage: install
  artifacts:
    paths:
      - node_modules
    expire_in: 1 day
  script:
    - yarn install

lint:
  <<: *general
  stage: test
  dependencies:
    - install
  script:
    - yarn lint

test:
  <<: *general
  stage: test
  dependencies:
    - install
  artifacts:
    paths:
      - coverage
    expire_in: 1 month
  script:
    - yarn test --ci --color --coverage

# license_management:
#   <<: *general
#   stage: test
#   image: docker:stable
#   variables:
#     DOCKER_DRIVER: overlay2
#   allow_failure: true
#   services:
#     - docker:stable-dind
#   script:
#     - export LICENSE_MANAGEMENT_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
#     - docker run
#         --volume "$PWD:/code"
#         "registry.gitlab.com/gitlab-org/security-products/license-management:$LICENSE_MANAGEMENT_VERSION" analyze /code
#   artifacts:
#     paths:
#       - gl-license-management-report.json

# Run the jobs below only for `release` branch.
build:
  <<: *release
  stage: build
  dependencies:
    - install
  artifacts:
    paths:
      - dist
    expire_in: 1 day
  script:
    - yarn build

publish to npm:
  <<: *release
  stage: publish
  tags:
    - devaus
  dependencies:
    - build
  allow_failure: false
  script:
    - export PACKAGE_VERSION=$(node -p -e "require('./package.json').version")
    - echo "Publish version v${PACKAGE_VERSION}"
    - npm publish && git tag v${PACKAGE_VERSION} && git push --tags
